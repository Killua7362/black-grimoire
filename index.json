[{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749071,"size":581,"blocks":8,"atimeMs":1657081040124.832,"mtimeMs":1656929618075.185,"ctimeMs":1657081039865.907,"birthtimeMs":1653100780000,"atime":"2022-07-06T04:17:20.125Z","mtime":"2022-07-04T10:13:38.075Z","ctime":"2022-07-06T04:17:19.866Z","birthtime":"2022-05-21T02:39:40.000Z"},"slug":"notes/killua brain/CS/Concepts/Hashmap","content":"# Why Hashmap takes constant look time\n\n## Load Factor \n\tIt is the measure of how much size is left in hashmap before rehashes and doubles the size. \n\tIf the initial capacity is greater than \n\t\n\t$maximum\\ number\\ of\\ begining\\ elements/loadfactor$ \n\n\tthen there wont be rehashing in future\n\tSo low load factor means more hashing in future so no more collissions but more lookups.\n\tHashmap creates buckets that means every element is unique so computer knows where that element is exactly!\n\tBut sometime bad hashmap means all elments in single bucket and not constant time lookup\n\n\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749072,"size":75,"blocks":8,"atimeMs":1657081040116.536,"mtimeMs":1656931001898.0002,"ctimeMs":1657081039867.0369,"birthtimeMs":1656930851059.0151,"atime":"2022-07-06T04:17:20.117Z","mtime":"2022-07-04T10:36:41.898Z","ctime":"2022-07-06T04:17:19.867Z","birthtime":"2022-07-04T10:34:11.059Z"},"slug":"notes/killua brain/CS/Concepts/testing","content":"\n\ni am gonna take this yayy\n[[Hashmap]]","frontmatter":{"title":"testing in here only"}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749060,"size":287,"blocks":8,"atimeMs":1657081040097.2117,"mtimeMs":1655364568722.3674,"ctimeMs":1657081039855.625,"birthtimeMs":1654493738000,"atime":"2022-07-06T04:17:20.097Z","mtime":"2022-06-16T07:29:28.722Z","ctime":"2022-07-06T04:17:19.856Z","birthtime":"2022-06-06T05:35:38.000Z"},"slug":"notes/killua brain/CS/DSA/NeetCode","content":"```ad-abstract\ntitle: Arrays\ncollapse: open\n```\n- [[contains_duplicate]]\n- [[valid_anagram]]\n- [[two_sum]]\n- [[group_anagrams]]\n- [[k_frequent_elements]]\n- [[product_of_array_except_self]]\n- [[sudoku]]\n- [[longest_sequense_length]]\n\n```ad-abstract\ntitle: Two Pointers\ncollapse: open\n```\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749054,"size":479,"blocks":8,"atimeMs":1657081040098.689,"mtimeMs":1655364568775.3596,"ctimeMs":1657081039848.6963,"birthtimeMs":1652867322260.4878,"atime":"2022-07-06T04:17:20.099Z","mtime":"2022-06-16T07:29:28.775Z","ctime":"2022-07-06T04:17:19.849Z","birthtime":"2022-05-18T09:48:42.260Z"},"slug":"notes/killua brain/CS/DSA/problems/3sum","content":"\n\nnums = [-1,0,1,2,-1,-4]\nres = []\nnums.sort()\n\nfor i, a in enumerate(nums):\n    if i > 0 and a == nums[i - 1]:\n        continue\n    \n    l, r = i + 1, len(nums) - 1\n    while l < r:\n        threeSum = a + nums[l] + nums[r]\n        if threeSum > 0:\n            r -= 1\n        elif threeSum < 0:\n            l += 1\n        else:\n            res.append([a, nums[l], nums[r]])\n            l += 1\n            while nums[l] == nums[l - 1] and l < r:\n                l += 1\nprint(res)\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749059,"size":251,"blocks":8,"atimeMs":1657081040142.974,"mtimeMs":1655364568793.7446,"ctimeMs":1657081039854.619,"birthtimeMs":1652871836792.3003,"atime":"2022-07-06T04:17:20.143Z","mtime":"2022-06-16T07:29:28.794Z","ctime":"2022-07-06T04:17:19.855Z","birthtime":"2022-05-18T11:03:56.792Z"},"slug":"notes/killua brain/CS/DSA/problems/area_array","content":"def area(i,j):\n    return (min(array[i],array[j]))*(j-i)\n\n\narray = [0,1,0,2,1,0,1,3,2,1,2,1]\nmaxarea = 0\ni=0\nj=len(array)-1\nwhile(i<j):\n    maxarea=max(maxarea,area(i,j))\n    if array[i]>array[j]:\n        j=j-1\n    else:\n        i=i+1\n\nprint(maxarea)\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749052,"size":92,"blocks":8,"atimeMs":1657081039997.6946,"mtimeMs":1655364568813.109,"ctimeMs":1657081039846.0525,"birthtimeMs":1653672945197.466,"atime":"2022-07-06T04:17:19.998Z","mtime":"2022-06-16T07:29:28.813Z","ctime":"2022-07-06T04:17:19.846Z","birthtime":"2022-05-27T17:35:45.197Z"},"slug":"notes/killua brain/CS/DSA/problems/contains_duplicate","content":"hashmap = []\n\nfor n in nums:\n    if n in hashmap:\n        return True\n    hashmap.append(n)\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749058,"size":52,"blocks":8,"atimeMs":1657081040120.734,"mtimeMs":1655364568833.3328,"ctimeMs":1657081039853.2246,"birthtimeMs":1652862747485.1243,"atime":"2022-07-06T04:17:20.121Z","mtime":"2022-06-16T07:29:28.833Z","ctime":"2022-07-06T04:17:19.853Z","birthtime":"2022-05-18T08:32:27.485Z"},"slug":"notes/killua brain/CS/DSA/problems/encode_decode","content":"I\narray = [\"lint\",\"code\",\"love\",\"you\"]\nprint(array)\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749053,"size":572,"blocks":8,"atimeMs":1657081039990.7817,"mtimeMs":1655364568854.2632,"ctimeMs":1657081039847.2983,"birthtimeMs":1652175190410.9873,"atime":"2022-07-06T04:17:19.991Z","mtime":"2022-06-16T07:29:28.854Z","ctime":"2022-07-06T04:17:19.847Z","birthtime":"2022-05-10T09:33:10.411Z"},"slug":"notes/killua brain/CS/DSA/problems/group_anagrams","content":"from collections import defaultdict\nstrs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n\n#we can create hashmap with count of alphabets as key and anagrams group as value\n\nhashmap = defaultdict(list)#if count doesnt exist first tiem\n\nfor i,n in enumerate(strs): \n    lists = [0]*26 #there are 26 english alphabets from a...z\n\n    for count in n:\n        lists[ord(count)-ord(\"a\")]+=1 #getting ascii value of string elments\n\n    hashmap[tuple(lists)].append(n) #python cant have list as a key so using tuple\n\nfor i,n in hashmap.items(): #used to print key,value pair\n    print(n)\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749057,"size":394,"blocks":8,"atimeMs":1657081040112.3716,"mtimeMs":1655364568856.479,"ctimeMs":1657081039852.092,"birthtimeMs":1654489899337.3176,"atime":"2022-07-06T04:17:20.112Z","mtime":"2022-06-16T07:29:28.856Z","ctime":"2022-07-06T04:17:19.852Z","birthtime":"2022-06-06T04:31:39.337Z"},"slug":"notes/killua brain/CS/DSA/problems/k_frequent_elements","content":"nums = [1,1,1,2,2,3]\nk = 2\n\ncount = {}\n\nfor i in nums:\n    count[i]= 1+count.get(i,0)\n#now we can count numbers and  sort based on vlaues in dict or we can use heap and pop k elements\n\n\n#using bucket sort\n# it will be like index is number of time elments occur\nfreq = [[] for i in range(len(nums)+1)] #elments which will occur times\nfor n,c in count.items():\n    freq[c].append(n)\n\nprint(freq)\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749055,"size":327,"blocks":8,"atimeMs":1657081040083.2744,"mtimeMs":1655364568858.7976,"ctimeMs":1657081039849.8374,"birthtimeMs":1652864208667.2866,"atime":"2022-07-06T04:17:20.083Z","mtime":"2022-06-16T07:29:28.859Z","ctime":"2022-07-06T04:17:19.850Z","birthtime":"2022-05-18T08:56:48.667Z"},"slug":"notes/killua brain/CS/DSA/problems/longest_sequense_length","content":"# we can solve this by checking if there is left elment\n# then it is a starting point\n\n\n```\nnumSet = set(nums)\nlongest = 0\n\nfor n in nums:\n    if n-1 not in numSet:\n        length = 0\n        while n+length in numSet:\n            length+=1\n        longest = max(longest,length)\n\n```\n\n\n/* \nset takes o(n) for every operation \n*/","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749046,"size":261,"blocks":8,"atimeMs":1657081039983.469,"mtimeMs":1655364568860.45,"ctimeMs":1657081039839.3264,"birthtimeMs":1652861079492.7424,"atime":"2022-07-06T04:17:19.983Z","mtime":"2022-06-16T07:29:28.860Z","ctime":"2022-07-06T04:17:19.839Z","birthtime":"2022-05-18T08:04:39.493Z"},"slug":"notes/killua brain/CS/DSA/problems/product_of_array_except_self","content":"array = [1,2,3,4]\nresult =[1 for i in range(len(array))]\n\nprefix = 1\n\nfor i in range(len(array)):\n    result[i] = prefix\n    prefix = prefix*array[i]\n\npostfix =1\nfor i in range(len(array)-1,-1,-1):\n    result[i] *= postfix\n    postfix*=array[i]\n\n\nprint(result)\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749056,"size":428,"blocks":8,"atimeMs":1657081040096.088,"mtimeMs":1655364568861.806,"ctimeMs":1657081039850.8145,"birthtimeMs":1652861465326.967,"atime":"2022-07-06T04:17:20.096Z","mtime":"2022-06-16T07:29:28.862Z","ctime":"2022-07-06T04:17:19.851Z","birthtime":"2022-05-18T08:11:05.327Z"},"slug":"notes/killua brain/CS/DSA/problems/sudoku","content":"board = []\ncols = collections.defaultdict(set)\nrows = collections.defaultdict(set)\nsquares = collections.defaultdict(set)\n\nfor r in range(9):\n    for c in range(9):\n        if(board[r][c] in cols[c] or\n                board[r][c] in rows[r]or\n                board[r][c] in squares[(r//3,c//3)]):\n            print(\"bad board\")\n    cols[c].add(board[r][c])\n    rows[r].add(board[r][c])\n    squares[(r//3,c//3)].add(board[r][c])\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749049,"size":27,"blocks":8,"atimeMs":1657081039977.5134,"mtimeMs":1655364568863.8083,"ctimeMs":1657081039842.4846,"birthtimeMs":1652871942002.9705,"atime":"2022-07-06T04:17:19.978Z","mtime":"2022-06-16T07:29:28.864Z","ctime":"2022-07-06T04:17:19.842Z","birthtime":"2022-05-18T11:05:42.003Z"},"slug":"notes/killua brain/CS/DSA/problems/trapping_rain_water","content":"array =[1,8,6,2,5,4,8,3,7]\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749048,"size":162,"blocks":8,"atimeMs":1657081039977.5137,"mtimeMs":1655364568867.0974,"ctimeMs":1657081039841.5645,"birthtimeMs":1652172947097.6963,"atime":"2022-07-06T04:17:19.978Z","mtime":"2022-06-16T07:29:28.867Z","ctime":"2022-07-06T04:17:19.842Z","birthtime":"2022-05-10T08:55:47.098Z"},"slug":"notes/killua brain/CS/DSA/problems/two_sum","content":"array = [2,7,11,15]\ntarget = 9\n\nhashmap = {}\n\nfor i,n in enumerate(array):\n    if target-i in hashmap:\n        print(\"yes\")\n        break\n    hashmap[array[i]]=i\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749050,"size":304,"blocks":8,"atimeMs":1657081039994.6875,"mtimeMs":1655364568869.1157,"ctimeMs":1657081039843.7576,"birthtimeMs":1652173141610.2268,"atime":"2022-07-06T04:17:19.995Z","mtime":"2022-06-16T07:29:28.869Z","ctime":"2022-07-06T04:17:19.844Z","birthtime":"2022-05-10T08:59:01.610Z"},"slug":"notes/killua brain/CS/DSA/problems/valid_anagram","content":"s=\"anagram\"\nt=\"nagaram\"\n\ndef cheq_anagram(s,t):\n    countS, countT = {},{}\n    for i in range(len(s)):\n        countS[s[i]]=1+countS.get(s[i],0)\n        countT[t[i]]=1+countT.get(t[i],0)\n\n    for i in countS:\n        if countS[i] != countS.get(i,0):\n            print(\"not a anagram\")\n\n\n#or we can do s\n\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749051,"size":0,"blocks":0,"atimeMs":1652864229155.7798,"mtimeMs":1652864229155.7798,"ctimeMs":1657081039844.7864,"birthtimeMs":1652864229155.7798,"atime":"2022-05-18T08:57:09.156Z","mtime":"2022-05-18T08:57:09.156Z","ctime":"2022-07-06T04:17:19.845Z","birthtime":"2022-05-18T08:57:09.156Z"},"slug":"notes/killua brain/CS/DSA/problems/valid_palindrome","content":"","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749067,"size":2017,"blocks":8,"atimeMs":1657081040124.1724,"mtimeMs":1655364568760.3464,"ctimeMs":1657081039862.7454,"birthtimeMs":1654915907685.8171,"atime":"2022-07-06T04:17:20.124Z","mtime":"2022-06-16T07:29:28.760Z","ctime":"2022-07-06T04:17:19.863Z","birthtime":"2022-06-11T02:51:47.686Z"},"slug":"notes/killua brain/CS/Internship/Journal","content":"Sequence of accounts\nAkshay Bhat\nAkshay(college account)\nKillua\n\n* Trial 33\n\t* Seq len:512\n\t* batch:8\n\t* using nothing but 768 dense with 0.2 max norm\n\t* using dropout of 0.5 for every layer\n\t* using last 4 layers\n\t* using constant learning rate 10%\n\t* Results\n\t\t* Val_loss is higher so overfitting\n\t\t* after 3rd epoch still loss decreasing\n* Trial 34\n\t* Using only last layer\n\t* splitted 768 dense to two 128 dense with 0.5 dropout between and 3 max norm \n\t* training only on last hidden layer\n\t\t* Results\n\t\t\t* Unknown fit yayyy\n\t\t\t* train accuracy>val accruacy\n\t\t\t* so might be dropout problem\n* Trial 35\n\t* batch from 8->16\n\t* Results\n\t\t* Still underfits yayyyy\n* Trial 36\n\t* 16->8 batch\n\t* Remove one dense and dropout layer\n\t\t* Result \n\t\t\t* I call this litttttle overfitting no?\n\t\t\t* ![[trail-36.png]] \n* Trial 37\n\t* back to 16 batch\n\t* changed to 0.1 for all layers between bert layers\n\t* tooooo much overfitting ;(\n* Trial 38\n\t* Back to 0.5 :( drops\n\t* Back to 8 batch(didn't make any difference so...)\n\t* added that dense layer back\n\t* seems to underfit\n\t\t* Results\n\t\t\t* Yayyy underfitting\n* Trial 38\n\t* removed one dense layer\n\t* added global average pooling\n\t\t* Result \n\t\t\t* Overfits\n* Trial 39\n\t* added globalmax pool Back\n\t* Someting happend\n\t\t* result\n\t\t\t* ![[trial-39.png]]\n* Trial 40\n\t* Using globalavg pool\n\t*  0.1 for dropout inside transformer\n\t* ooooverfitting\n* Trial 41\n\t* Using 0.5 dropout only\n\t* overfitting\n* Trial 42\n\t* activation ->dropout->max norm \n\t* not meeting\n\t* result\n\t\t* ![[trial 42.png]]\n* Trial 43\n\t* started using globalmax pool\n\t* drop(64)->dense(0.3)->activation tanh->drop(64)->dense(2)\n\t* Results\n\t\t* ![[trial43.png]]\n* Trial 44\n\t* added leaky relu and l2 regularize for dense layer\n* Trial 45\n\t* Using 256 seq len\n\t* using  max norm with one layer and one dropout layer\n\t* 0.5 dropout for every layer\n\t* batch stays 8\n* Trial 46\n\t* Very light cleaning with no augmentatino\n\t* 256 seq len and batch size 8\n\t* flatten->dense(128)with maxnorm 3 and dropouut 0.5\n\t* lr=2e-5\n\t* ","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749068,"size":321,"blocks":8,"atimeMs":1657081040114.8708,"mtimeMs":1655364568762.8237,"ctimeMs":1657081039863.8984,"birthtimeMs":1654927154592.5898,"atime":"2022-07-06T04:17:20.115Z","mtime":"2022-06-16T07:29:28.763Z","ctime":"2022-07-06T04:17:19.864Z","birthtime":"2022-06-11T05:59:14.593Z"},"slug":"notes/killua brain/CS/Internship/Notes","content":"1.  Underfitting – Validation and training error high\n2.  Overfitting – Validation error is high, training error low\n3.  Good fit – Validation error low, slightly higher than the training error\n4.  Unknown fit - Validation error low, training error 'high'\n\n```\nLinear (out=1000-D)\nReLU\nBatchNorm\nDropout (0.25)\n```\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749034,"size":1385,"blocks":8,"atimeMs":1657081040089.7808,"mtimeMs":1655364568764.4114,"ctimeMs":1657081039830.464,"birthtimeMs":1651218752000,"atime":"2022-07-06T04:17:20.090Z","mtime":"2022-06-16T07:29:28.764Z","ctime":"2022-07-06T04:17:19.830Z","birthtime":"2022-04-29T07:52:32.000Z"},"slug":"notes/killua brain/CS/Machine learning/Basic QnA","content":"\nTARGET DECK: Machine learning\n\nwhat is Imputation [[flashcard]]\nIt is method of filling missing data \n<!--ID: 1651239192531-->\n\nIf data is missed complete at the random {do pairwise delete}\n^1651241841406\n<!--ID: 1651239192539-->\n\nWhat is Nominal Variable [[flashcard]] \ndata is independant in feature\n<!--ID: 1651240655653-->\n\nOrdinal Var [[flashcard]] \n Datas are dependant\n<!--ID: 1651240655664-->\n\n\nDummy variable trap [[flashcard]] \nMulticollinearity occuring when there is number of encoded column = number of types of feature\nexample\nMale  1 0\nFemale 0 1 which inturn are identical\nso to avoid this we can use cateories-1 dummy va\nr\n<!--ID: 1651241845884-->\n\npipeline [[flashcard]] \nIt combines multiple transformer,feature scaler etc. then Feature union helps to combine pipeline\n<!--ID: 1651377601869-->\n\n\nk-fold cross validation [[flashcard]] \nIt is used to run same dataset multiple time random set. to avoid overfitting of data\n<!--ID: 1651377601880-->\n\n\nGrid search [[flashcard]] \nIt is used to get test all hyperparameters from dict\n<!--ID: 1651377601885-->\n\n\nConfusion matrix [[flashcard]] \nNumber of time class a considered as class b\n<!--ID: 1651377601887-->\n\ndifference between batch gradient descent and stochastic gradient design [[flashcard]] \nfinding gradient design for whole data vs some batch of data","frontmatter":{"cards-deck":"killua brain::Coding::Machine learning"}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749033,"size":390,"blocks":8,"atimeMs":1657081039872.8435,"mtimeMs":1655364568766.3762,"ctimeMs":1657081039829.2283,"birthtimeMs":1651240646000,"atime":"2022-07-06T04:17:19.873Z","mtime":"2022-06-16T07:29:28.766Z","ctime":"2022-07-06T04:17:19.829Z","birthtime":"2022-04-29T13:57:26.000Z"},"slug":"notes/killua brain/CS/Machine learning/Encoding","content":"# Encoding\nIt is used to convert words to numerical value\n\nTypes of Encoding:\n- Ordinal Encoding\n\tIt is used to create relationship\n- One-Hot Encoding\n\tIt is used to convert numbers into 1 or 0 tables but more the type of var more the column so more complexity\n- Dummy Var Encoding\n\tIt is same as one hot encoding but ignores last column\n- Lable Encoder\n\tIt is for encoding yes or no lable\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749032,"size":201,"blocks":8,"atimeMs":1657081040576.4539,"mtimeMs":1655364568768.1643,"ctimeMs":1657081039828.1365,"birthtimeMs":1651240661000,"atime":"2022-07-06T04:17:20.576Z","mtime":"2022-06-16T07:29:28.768Z","ctime":"2022-07-06T04:17:19.828Z","birthtime":"2022-04-29T13:57:41.000Z"},"slug":"notes/killua brain/CS/Machine learning/Feature Scaling","content":"# Feature Scaling\nIt allows to put every data on same scale to avoid domination\n\nType of Feature Scaing:\n- Normalization - moving it from 0 to 1\n- Standardization\n\n> Don't apply these for encoded var\n\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749036,"size":0,"blocks":0,"atimeMs":1654155696000,"mtimeMs":1651240919000,"ctimeMs":1657081039831.5486,"birthtimeMs":1651240919000,"atime":"2022-06-02T07:41:36.000Z","mtime":"2022-04-29T14:01:59.000Z","ctime":"2022-07-06T04:17:19.832Z","birthtime":"2022-04-29T14:01:59.000Z"},"slug":"notes/killua brain/CS/Machine learning/Regression/Linear Regression","content":"","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749039,"size":352,"blocks":8,"atimeMs":1657081040580.4258,"mtimeMs":1655364568770.195,"ctimeMs":1657081039833.7908,"birthtimeMs":1652167764000,"atime":"2022-07-06T04:17:20.580Z","mtime":"2022-06-16T07:29:28.770Z","ctime":"2022-07-06T04:17:19.834Z","birthtime":"2022-05-10T07:29:24.000Z"},"slug":"notes/killua brain/CS/Python/Arrays","content":"- hashmap.get(index,default value)\n\t- this is used to deal with keyerror which is used when index is not in hashmap\n- ascii value of variable a is ord(a)\n- In python list cannot be keys \n- we can use defaultdict if there we need to initiate empty list which can take value which is not in it too\n\t- defaultdict(list,lambda:0) list with initial value 0\n","frontmatter":{}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749041,"size":385,"blocks":8,"atimeMs":1657081040587.2158,"mtimeMs":1655364568772.135,"ctimeMs":1657081039835.068,"birthtimeMs":1653904963000,"atime":"2022-07-06T04:17:20.587Z","mtime":"2022-06-16T07:29:28.772Z","ctime":"2022-07-06T04:17:19.835Z","birthtime":"2022-05-30T10:02:43.000Z"},"slug":"notes/killua brain/CS/Rust/Basic Rust","content":"\n# Cargo\n- you have to run cargo new to create new crate\n- cargo build to build src/main.rs file\n- ./target/debug/foldername to run it\n- cargo run = build+run\n- cargo has sematic version so if you mentiont version \"0.2.3\" in carg.toml it will install minimum 0.2.3 max latest\n- use cargo build to install packages\n- use cargo update to update crates\n\t- clear\n\n","frontmatter":{"tags":"cargo rust"}},{"stats":{"dev":16777230,"mode":33188,"nlink":1,"uid":501,"gid":20,"rdev":0,"blksize":4096,"ino":36749042,"size":1372,"blocks":8,"atimeMs":1657081040585.7437,"mtimeMs":1655364568773.6167,"ctimeMs":1657081039835.8877,"birthtimeMs":1653905787000,"atime":"2022-07-06T04:17:20.586Z","mtime":"2022-06-16T07:29:28.774Z","ctime":"2022-07-06T04:17:19.836Z","birthtime":"2022-05-30T10:16:27.000Z"},"slug":"notes/killua brain/CS/Rust/Gussing game","content":"\n## Function Defination\n```\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\n## prelude\n\tThese are just small important components used in rust library\n\n\n```\nuse std::io;\nThis imports io from std library\n```\n\n```\nfn main(){\nlet mut var=String::new(); \n\n - default var are immutable so use *mut* to make it mutable\n - new is instance of String class so here var is mutable string variable\n\n```\n```\nio::stdin()\n    .read_line(&mut var)\n    .expect(\"Failed to read line\");\n\nprintln!(\"my guess is {}\",var);\n\n - stdin in part of io library\n - here read_line is the method which is taking reference of mutable variable\n - & is the reference to avoid copy\n - with some error handling\n}\n```\n\n```\nAfter downloading random crate\nuse rand::Rng; \n\nrng means random number generator\n```\n\n```\nrand::thread_rng().gen_range(1..101);\nthread_rng means creating it locally\n```\n\n```\nfor infinite loop\nloop{} \n```\n\n```\nComparing guess_no and var\n\nuse std::cmp::Ordering;\nmatch var.cmp(&guess_no){\n\tOrdering::Less=>println!(\"Lesser\"),\n\tOrdering::Equal =>{\n\t\tbreak;\n\t},\n\tOrdering::Greater=>println!(\"Greater\"),\n}\n\n```\n\n```\nExplicitly mention data type\nfloat-32 bit\nlet var:f32 = 3.2;\n\n```\n\n\n```\nlet x = (x1,x2,x3)\nx.0,x.1,x.2 gives 3 elements\n```\n\n```\nlet a:[i32;5] =[1,2,3,4,5]\nlet a=[3;5]; //here array will have 5 threes\n```\n\n- Array Indexing a[0]\n- Tuple Indexing a.0\n\n","frontmatter":{"tags":"rust"}}]